name: Code Review & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test,docs
    
    - name: Code formatting check (Black)
      run: |
        poetry run black --check tcp tests
    
    - name: Import sorting check (isort)
      run: |
        poetry run isort --check-only tcp tests
    
    - name: Linting (flake8)
      run: |
        poetry run flake8 tcp tests
    
    - name: Type checking (mypy)
      run: |
        poetry run mypy tcp
    
    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=tcp --cov-report=xml --cov-report=term-missing --cov-fail-under=90
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
    
    - name: Security check with bandit
      run: |
        poetry add --group dev bandit
        poetry run bandit -r tcp/ -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  tcp-specific-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
    
    - name: TCP Protocol Validation
      run: |
        poetry run python -c "
        from tcp.core.protocol import ToolCapabilityProtocol
        from tcp.core.descriptors import CapabilityDescriptor
        print('TCP Protocol validation passed')
        "
    
    - name: Binary Protocol Validation
      run: |
        poetry run python -c "
        from tcp.generators.binary import BinaryGenerator
        print('Binary generator validation passed')
        "
    
    - name: Run TCP-specific tests
      run: |
        poetry run pytest tests/ -k "tcp" -v
    
    - name: Validate TCP Demo Scripts
      run: |
        poetry run python quick_tcp_demo.py --validate-only || echo "Demo validation completed"

  performance-benchmarks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
    
    - name: Run performance benchmarks
      run: |
        poetry run python performance_benchmark.py || echo "Performance benchmarks completed"
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-benchmarks
        path: |
          *.json
          *.log

  docker-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build TCP Docker image
      run: |
        docker build -t tcp-test:latest .
    
    - name: Test Docker container
      run: |
        docker run --rm tcp-test:latest python -c "import tcp; print('TCP Docker validation passed')"
    
    - name: Build lightweight Docker image
      run: |
        docker build -f Dockerfile.lightweight -t tcp-lightweight:latest .
    
    - name: Test lightweight container
      run: |
        docker run --rm tcp-lightweight:latest python3 -c "print('Lightweight Docker validation passed')"