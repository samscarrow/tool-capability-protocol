[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "tool-capability-protocol"
version = "0.1.0"
description = "Universal protocol for machine-readable tool capability description and discovery"
authors = ["TCP Team <team@tcp.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/tcp/tool-capability-protocol"
repository = "https://github.com/tcp/tool-capability-protocol"
documentation = "https://tcp.dev/docs"
keywords = ["llm", "tools", "protocol", "capability", "machine-readable"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
packages = [{include = "tcp"}]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.0.0"
typing-extensions = "^4.8.0"
protobuf = "^4.25.0"
jsonschema = "^4.19.0"
click = "^8.1.0"
httpx = "^0.27.0"
pyyaml = "^6.0"
jinja2 = "^3.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.4.0"
sphinx = "^7.1.0"
sphinx-rtd-theme = "^1.3.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.2.0"
bandit = "^1.8.6"

[tool.poetry.group.test.dependencies]
coverage = "^7.3.0"
pytest-mock = "^3.11.0"
pytest-httpx = "^0.30.0"

[tool.poetry.group.docs.dependencies]
mkdocs-mermaid2-plugin = "^1.1.0"
mkdocs-include-markdown-plugin = "^6.0.0"

[tool.poetry.scripts]
tcp = "tcp.cli:main"
tcp-wrap = "tcp.tools.wrapper:main"
tcp-query = "tcp.tools.query:main"
tcp-discover = "tcp.tools.discovery:main"
tcp-generate = "tcp.generators.cli:main"

[tool.poetry.plugins."tcp.generators"]
json = "tcp.generators.json:JSONGenerator"
openapi = "tcp.generators.openapi:OpenAPIGenerator"
graphql = "tcp.generators.graphql:GraphQLGenerator"
protobuf = "tcp.generators.protobuf:ProtobufGenerator"
binary = "tcp.generators.binary:BinaryGenerator"

[tool.poetry.plugins."tcp.adapters"]
cli = "tcp.adapters.cli:CLIAdapter"
rest = "tcp.adapters.rest:RESTAdapter"
grpc = "tcp.adapters.grpc:GRPCAdapter"
mcp = "tcp.adapters.mcp:MCPAdapter"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tcp"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "protobuf.*",
    "grpc.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
    "performance: marks tests that measure performance",
]

[tool.coverage.run]
source = ["tcp"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]
max-complexity = 10